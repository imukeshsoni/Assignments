Q1. Insert following documents in movies collection : 


Ans:

db.movies.insertMany([{ "title" : "Pulp Fiction","writer" : "Quentin Tarantino","year" : 1994,"actors" : ["John Travolta","Uma Thurman"]},{"title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actors" :["Brad Pitt","Diane Kruger","Eli Roth"]},{"title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit"},{"title":"The Hobbit: The Desolation of Smaug","writer":"J.R.R. Tolkein","year" : 2013, "franchise" : "The Hobbit"},{"title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."},{"title" : "Pee Wee Herman's Big Adventure"},{"title" : "Avatar"}])

Query/Find Documents:

query the movies collection to
1. get all documents
Ans : db.movies.find()

2. get all documents with writer set to "Quentin Tarantino"
Ans : db.movies.find({"writer":"Quentin Tarantino"})

3. get all documents where actors include "Brad Pitt"
Ans : db.movies.find({"actors":"Brad Pitt"})

4. get all documents with franchise set to "The Hobbit"
Ans : db.movies.find({"franchise":"The Hobbit"})

5. get all movies released in the 90s
Ans : db.movies.find({"year":{$gte: 1990},"year":{$lte: 2000}})

6. get all movies released before the year 2000 or after 2010
Ans :db.movies.find({"year":{$lt: 2000},"year":{$gt: 2010}})


Update Documents:


1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of
dwarves to reclaim their mountain home - and the gold within it - from the
dragon Smaug."


Ans : db.movies.update({"title":"The Hobbit: An Unexpected Journey"}, 
{$set : {"synopsis":"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain 
with a spirited group of dwarves to reclaim their mountain home - and the gold within it 
- from the dragon Smaug."}})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
mysterious and magical ring."

Ans : db.movies.update({"title":"The Hobbit: The Desolation of Smaug"}, 
{$set : {"synopsis":"The dwarves, along with  Bilbo Baggins and Gandalf the Grey, 
continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins 
is in possession of a mysterious and magical ring."}})


3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction".

Ans : db.movies.update({"title":"Pulp Fiction"}, {$set : {"actors":"Samuel L. Jackson"}})



Text Search

1. find all movies that have a synopsis that contains the word "Bilbo"

Ans :   db.movies.createIndex({synopsis:"text"});
	db.movies.find({$text: {$search:"Bilbo"}});
	db.movies.dropIndex("synopsis_text")


2. find all movies that have a synopsis that contains the word "Gandalf"
Ans :	db.movies.createIndex({synopsis:"text"});
        db.movies.find({$text: {$search:"Gandalf"}});
        db.movies.dropIndex("synopsis_text")

3. find all movies that have a synopsis that contains the word "Bilbo" and not the
word "Gandalf"

Ans :   db.movies.createIndex({synopsis:"text"})
        db.movies.find({$text: {$search:"Bilbo -Gandalf"}})
        db.movies.dropIndex("synopsis_text")
 


4. find all movies that have a synopsis that contains the word "dwarves" or
"hobbit"

Ans : db.movies.find({$text: {$search:"dwaeves hobbit"}})


5. find all movies that have a synopsis that contains the word "gold" and
"dragon"

Ans : db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]})



Delete Documents
1. delete the movie "Pee Wee Herman's Big Adventure"

Ans : db.movies.remove({"title":"Pee Wee Herman's Big Adventure"})
	


2. delete the movie "Avatar"

Ans : db.movies.remove({"title":"Avatar"})



Relationships


Insert the following documents into a users collection
1. 
username : GoodGuyGreg
first_name : "Good Guy"
last_name : "Greg"
2.
username : ScumbagSteve
full_name :
 first : "Scumbag"
 last : "Steve"

Ans :   1. db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})
	2. db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})

Insert the following documents into a posts collection
1.
username : GoodGuyGreg
title : Passes out at party
body : Wakes up early and cleans house

Ans : db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})


2.
username : GoodGuyGreg
title : Steals your identity
body : Raises your credit score

Ans : db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})


3. 
username : GoodGuyGreg
title : Reports a bug in your code
body : Sends you a Pull Request

Ans : db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})


4. 
username : ScumbagSteve
title : Borrows something
body : Sells it

Ans : db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})


5.
username : ScumbagSteve
title : Borrows everything
body : The end

Ans : db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})


6.
username : ScumbagSteve
title : Forks your repo on github
body : Sets to private

Ans : db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})


Insert the following documents into a comments collection
1. 
username : GoodGuyGreg
comment : Hope you got a good deal!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"

Ans : db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("5ffedc085e5c650be2cdb0bd")})


2.
username : GoodGuyGreg
comment : What's mine is yours!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"

Ans : db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("5ffedc0e5e5c650be2cdb0be")})


3.
username : GoodGuyGreg
comment : Don't violate the licensing agreement!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on
github"

Ans : db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("5ffedc165e5c650be2cdb0bf")});



4.
username : ScumbagSteve
comment : It still isn't clean
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"

Ans : db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("5ffedbf35e5c650be2cdb0ba")})




5.
username : ScumbagSteve
comment : Denied your PR cause I found a hack
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your
code"


Ans : db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("5ffedc025e5c650be2cdb0bc")})


Querying related collections


1. find all users

Ans : db.users.find()


2. find all posts

Ans : db.posts.find()


3. find all posts that was authored by "GoodGuyGreg"

Ans : db.posts.find({username:"GoodGuyGreg"})


4. find all posts that was authored by "ScumbagSteve"

Ans : db.posts.find({username:"ScumbagSteve"})


5. find all comments

Ans : db.comments.find()


6. find all comments that was authored by "GoodGuyGreg"

Ans : db.comments.find({username:"GoodGuyGreg"})


7. find all comments that was authored by "ScumbagSteve"

Ans : db.comments.find({username:"ScumbagSteve"})


8. find all comments belonging to the post "Reports a bug in your code"

Ans : db.comments.find({post:ObjectId("5ffedc025e5c650be2cdb0bc")})





















